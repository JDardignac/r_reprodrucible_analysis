---
title: "Chapter 5 Notes"
format: html
editor: source
---

## Exploring Data Frames

**Adding columns and rows in data frames**

```{r}
age <- c(2, 3, 5)
cats
```

```{r}
cbind(cats, age)
```

```{r}
age <- c(2, 3, 5, 12)
cbind(cats, age)
```
* should see an error
```{r}
age <- c(2, 3)
cbind(cats, age)
```
* should see an error

```{r}
nrow(cats)
```

```{r}
length(age)
```

* need to nrow(cats)=length(age)

```{r}
age <- c(2, 3, 5)
cats <- cbind(cats, age)
```

```{r}
newRow <- list( "tortoiseshell", 3.3, TRUE, 9)

cats <- rbind(cats, newRow)
```

```{r}
cats
```

## Removing rows

* learning how to remove rows and columns

```{r}
cats 
```

```{r}
cats[-4, ]
```

## Removing Columns


```{r}
cats[,-4]
```

* An empty comma before a comma signifies retaining all rows.

* Another method to drop a column involves using the index name and the %in% operator.

* The %in% operator checks if each element of its left argument is present in the second argument.



```{r}
drop <- names(cats) %in% c("age")
cats[,!drop]
```

# Appending to a data frame


```{r}
cats <- rbind(cats, cats)
cats
```


## Realistic Example

* The tutorial progresses from mastering data frame manipulation with cat data to practical application on the Gapminder dataset.

* It transitions seamlessly from theoretical learning to hands-on practice with real-world data.

```{r}
library(gapminder)
gapminder <- read.csv("data/gapminder_data.csv")
```

* Before delving into analysis, it's essential to inspect the structure of the gapminder dataset.

* The recommended approach is to use the str function to get an overview of the dataset's structure.

```{r}
str(gapminder)
```

* The summary function provides another method to examine the structure of the gapminder dataset.

* It offers a numeric, tabular, or descriptive summary of each column within the dataset.

* Descriptive statistics such as quartiles and mean are provided for numeric or integer columns.

* For character columns, the summary includes information on length, class, and mode.

```{r}
summary(gapminder)
```

* Along with the str and summary functions, we can examine individual columns of the data frame with our typeof function:
 
```{r}
typeof(gapminder$year)
```
```{r}
typeof(gapminder$country)
```


```{r}
str(gapminder$country)
```


```{r}
length(gapminder)
```


* Initially, one might assume that the length of a data frame corresponds to the number of rows it contains (e.g., 1704).

* However, it's important to remember that a data frame is essentially a list of vectors and factors, leading to a different understanding of its length.


```{r}
typeof(gapminder)
```

When length gave us 6, it’s because gapminder is built out of a list of 6 columns. To get the number of rows and columns in our dataset, try:

```{r}
nrow(gapminder)
```


```{r}
ncol(gapminder)
```

or both at once:

```{r}
dim(gapminder)
```

We’ll also likely want to know what the titles of all the columns are, so we can ask for them later:

```{r}
colnames(gapminder)
```

* It's crucial to assess whether the structure reported by R aligns with our expectations, ensuring that the basic data types assigned to each column make sense.

* Addressing any discrepancies at this stage prevents potential issues later on, emphasizing the importance of maintaining strict consistency in data recording.

* Once satisfied with the data types and structures, the next step involves delving into the dataset itself.
Examining the first few lines of data provides an initial insight into its contents and aids in further exploration.


```{r}
head(gapminder)

```









